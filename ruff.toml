select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # flake8-bandit security issues
    "RUF", # Ruff-specific rules
    "FBT", # flake8-boolean-trap
    "BLE", # flake8-blind-except
    "AIR", # flake8-airflow
    "ARG", # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B008", # flake8-bugbear: do not perform function calls in argument defaults
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FIX", # flake8-fixme
    "FLY", # flynt (string formatting)
    "G",   # flake8-logging-format
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "PD",  # pandas-vet
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "T10", # flake8-debugger
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "TRY", # tryceratops
    "YTT", # flake8-2020
]

# Ignore the following rules
ignore = [
    "B008", # Function calls in defaults (FastAPI dependencies need this)
    "C901", # Too complex
    "F401", # Unused imports (sometimes needed for type checking)
    "F841", # Unused variable (useful for debugging)
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value used in comparison
    "S101", # Use of assert
    "TRY003", # Avoid specifying long messages outside of exception class
    "ANN101", # Missing type annotation for self in method
    "TD002", # Missing docstring in class
    "TD003", # Missing docstring in method
    "TD004", # Missing docstring in public method
    "SLF001", # Private member access
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "U", "W", "YTT"]
unfixable = ["RUF001", "RUF002"]

# Exclude a variety of common directories.
exclude = [
    ".bzr",
    ".cdv",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when they start with _
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Use double quotes for strings
quote-style = "double"

# Require double quotes for docstrings
docstring-quotes = "double"

# Use Google-style docstrings
docstring-code-format = true

# Organize imports
isort.known-first-party = ["app"]

# Type checking rules
strict = true

# Enable flake8-type-checking
type-checking-modules = ["typing"]

# Per-file-ignores
# "app/__init__.py" = ["F401"]
# "tests/**/*.py" = ["S101"]

# Target version
target-version = "py311"

# Lint all files in the project
[tool.ruff.lint]
# Enable Pyflakes' F rules.
extend-select = [
    "F", 
    "B", 
    "I", 
    "N", 
    "UP", 
    "YTT", 
    "S", 
    "RUF", 
    "FBT", 
    "TRY", 
    "EM", 
    "DTZ", 
    "T10", 
    "COM", 
    "PT", 
    "SIM", 
    "ARG", 
    "PIE", 
    "SLF", 
    "FLY", 
    "AIR", 
    "PERF", 
    "FIX"
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.perflint]
enabled = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, wrap trailing commas.
skip-magic-trailing-comma = false
# Like Black, indent with spaces.
indent-style = "space"
# Like Black, respect magic trailing commas.
respect-magic-trailing-comma = true